
multiple communities
		

	community {
		upload image system

		implement: chat / rooms / subscription
		type of post: reddit / youtube / patreon / twitter / text / image / vimeo
	}

Menu tabs (pages): 
	
	Logo/title: redirects to All/Main page	
	All(main Page): Best posts by all this week - can sort by newest, best, and show results for certain time frame, search bar
	Circles: Best posts by friends - can sort by newest, best, and show results for certain time frame, search bar

	When logged in:
		New Post: Make a new post
		Avatar: hearts/golds, uploads, page for personnal infos
		Friends: Shows friends
		Log out

	When logged out:
		Log in
		Register

_______________________________
	On someone's page: 

		Tabs:
			- Main: see all posts
			- Hearts: see all likes posts
			- Golden hearts

		Options:
			- subscribe
			- Remove firend
			- Message

_______________________________
	On a post:

		- Can click on author
		- Can like

*****************
	TODO:  
		LOGIC:
		Sort menu:
			- see current sort by:
				- 1 day 
				- 7 days (default)
				- 1 month
				- 1 year
				- all time


		await Promise.all([])


		DESIGN: 
		- make css for search and active results of typeahead
		- find a like icon for h.icon in storecard
		- add animate for like in postcard (like__button--animate)

names: transient
	
	let currentParent = comment.parent;
	let parentCount = 0;
	while (currentParent && parentCount < 6) {
		parentCount++;
		currentParent = currentParent.parent;
	}

	Check the current system is working

	update curent comment parentCOunt

	karma system: 
		- vote up button
		logic:
			- save comment is in an array of user, same as posts
			- same logic

	sort comments in a way that replies appear directly under parents
		only render root parents
			sort childs by karma
			then run this function for each childs:
			function { for each child: 
				render it
				sort childs by karma
				run this function for each childs
			}
			:

				comment method directly in model, returns array
				[
					{
						comment 1: [
							child comment,
							child comment
						]
					},
					{
						comment 2: [
							child comment,
							child comment,
							child comment
						]
					}
				]

	schema virtual on Comment called for a comment, sort its child comments by likes

					//- if sortedParentComments.length > 0
				//- 	each parent in sortedParentComments
				//- 		.comments
				//- 			+comment(parent)

				if reply.parent.toString() == parent._id.toString() 